<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dashboard</title>
  <link rel="stylesheet" href="updateSection.css" />
  <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://fastly.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js"></script>
</head>

<body>
  <div class="main_container">
    <!-- !...Header part  which contain user_name,  App_Name and LOGOUT btn  -->
    <div class="header">
      <div class="logo_container">
        <img src="./icons/navBarIcon.png" title="Switch Mode" id="navBarIcon" alt="Menu Bar"
          style="cursor: pointer; width: 8%; margin: 0.5% 3%" />
        <div class="heading">Data Entry System</div>
      </div>
      <form id="btn" action="/logout" method="get" class="logoutButton">
        <div class="admin" id="user-mode-name">
          <%= currentUser %>
        </div>
        <button type="button" onclick="logout()" style="
              background: linear-gradient(to right, #0f0c29, #302b63, #24243e);
            "
          class="button-logout bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded">
          LOGOUT
        </button>
      </form>
    </div>
    <!-- ! ............Side Nav Bar Menu............ -->
    <div id="navBarDivision">
      <div id="UserProfileDiv" onmouseover="onmouseoverBGColor(event)" onmouseout="onmouseoutBGColor(event)"
        onclick="handleFormSubmit(event)">
        <div id="user_Profile" class="category">User Profile</div>
      </div>
      <!-- <div
          id="DataEntryDiv"
          onmouseover="onmouseoverBGColor(event)"
          onmouseout="onmouseoutBGColor(event)"
          onclick="handleFormSubmit(event)"
        >
          <div id="dataEntry" class="category">Data Entry</div>
        </div>
        <div
          id="ReportGenerationDiv"
          onmouseover="onmouseoverBGColor(event)"
          onmouseout="onmouseoutBGColor(event)"
          onclick="handleFormSubmit(event)"
        >
          <div id="reportGeneration" class="category">Report Generation</div>
        </div> -->
      <div id="AdministrationDiv" onmouseover="onmouseoverBGColor(event)" onmouseout="onmouseoutBGColor(event)"
        onclick="handleFormSubmit(event)">
        <div id="administration" class="category">Administration</div>
      </div>
      <div id="AdminLogDiv" onmouseover="onmouseoverBGColor(event)" onmouseout="onmouseoutBGColor(event)"
        onclick="handleFormSubmit(event)">
        <div id="adminLog" class="category">Admin Logs</div>
      </div>
      <div id="DashboardDiv" onmouseover="onmouseoverBGColor(event)" onmouseout="onmouseoutBGColor(event)"
        onclick="handleFormSubmit(event)">
        <div id="activityLog" class="category">User Activity Logs</div>
      </div>
      <div id="UpdateSectionDiv" onmouseover="onmouseoverBGColor(event)" onmouseout="onmouseoutBGColor(event)"
        onclick="handleFormSubmit(event)">
        <div id="update" class="category">Dashboard</div>
      </div>
    </div>
    <!-- !............  Vehicle Inspection System  Dashboard........... -->
    <div class="Dashboard_container">
      <div class="charts_container">
        <div class="pie_charts_container">
          <div id="pi_chart_1" class="pi_chart">               
              <div class="vehicle_title">TOTAL INSPECTION</div>
              <div echarts [options]="option1"
              style="display: flex; align-items: center;justify-content: center;"
              ></div>               
          </div>
          <div id="pi_chart_2" class="pi_chart" >
              <div class="vehicle_title">INNOVA</div>
              <div echarts [options]="option2"  ></div>               
          </div>
          <div id="pi_chart_3" class="pi_chart">
              <div class="vehicle_title">FORTUNER</div>
              <div echarts [options]="option3" ></div>
          </div>
      </div>
        <div class="detail_container">
          <div class="container">
            <div class="content">
              Total Vehicle : <span id="TotalVehicle"></span>
            </div>
          </div>
          <div class="container">
            <div class="content">
              Total Checks : <span id="TotalChecks"></span>
            </div>
          </div>
          <div class="container">
            <div class="content">
              Avg Check Time : <span id="AvgCheckTime"></span>
            </div>
          </div>
        </div>
      </div>
      <div class="graph_container">
        <div class="bar_graph_container">
          <div echarts id="bar_graph" [options]="option4"
            style="height:100%; width: 100%;padding:10px;"></div>
        </div>
        <div class="line_graph_container">
          <div echarts id="line_graph" style="height:100%; width: 100%; padding:10px;"></div>
        </div>
      </div>
    </div>
  </div>
  <!-- Denial of Access for AdminPage -->
  <div id="adminAccessDeniedDivision">
    <div class="adminAccessDeniedDivisionModalContent">
      <div id="adminAccessDeniedDivisionHolder">
        <p id="adminAccessDeniedDivisionMessage" style="font-weight: 600; font-size: large">
          Unauthorized Access. Only Admin has privilege
        </p>
        <div id="editEmployeeChartAccessEnsureButton">
          <button
            class="text-white bg-[#24292F] hover:bg-[#24292F]/90 focus:ring-4 focus:outline-none focus:ring-[#24292F]/50 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-500 dark:hover:bg-[#050708]/30 mr-2 mb-2"
            onclick="(() => {document.getElementById('adminAccessDeniedDivision').style.visibility = 'hidden'})()">
            OK
          </button>
        </div>
      </div>
    </div>
  </div>
  <!-- ! ............... Form to send values to other pages .................-->
  <form action="/updateSection" method="post" id="update_Section">
    <input type="hidden" id="currentUser" name="currentUser" value="<%= currentUser %>" />
    <input type="hidden" id="currentEmpID" name="currentEmpID" value="<%= currentEmpID %>" />
    <input type="hidden" id="companyName" name="companyName" value="<%= companyName %>" />
    <input type="hidden" class="token" name="token" value="" />
  </form>
  <form action="/profile" method="post" id="userProfileForm">
    <input type="hidden" id="currentUser" name="currentUser" value="<%= currentUser %>" />
    <input type="hidden" id="currentEmpID" name="currentEmpID" value="<%= currentEmpID %>" />
    <input type="hidden" id="companyName" name="companyName" value="<%= companyName %>" />
    <input type="hidden" class="token" name="token" value="" />
  </form>
  <form action="/filter" method="post" id="filterFrom">
    <input type="hidden" id="currentUser" name="currentUser" value="<%= currentUser %>" />
    <input type="hidden" id="currentEmpID" name="currentEmpID" value="<%= currentEmpID %>" />
    <input type="hidden" id="companyName" name="companyName" value="<%= companyName %>" />
    <input type="hidden" class="token" name="token" value="" />
  </form>
  <form action="/admin" method="post" id="adminForm">
    <input type="hidden" id="currentUser" name="currentUser" value="<%= currentUser %>" />
    <input type="hidden" id="currentEmpID" name="currentEmpID" value="<%= currentEmpID %>" />
    <input type="hidden" id="companyName" name="companyName" value="<%= companyName %>" />
    <input type="hidden" class="token" name="token" value="" />
  </form>
  <form action="/adminLog" method="post" id="adminLogForm">
    <input type="hidden" id="currentUser" name="currentUser" value="<%= currentUser %>" />
    <input type="hidden" id="currentEmpID" name="currentEmpID" value="<%= currentEmpID %>" />
    <input type="hidden" id="companyName" name="companyName" value="<%= companyName %>" />
    <input type="hidden" class="token" name="token" value="" />
  </form>
  <form action="/dashboard" method="post" id="dashboardForm">
    <input type="hidden" id="currentUser" name="currentUser" value="<%= currentUser %>" />
    <input type="hidden" id="currentEmpID" name="currentEmpID" value="<%= currentEmpID %>" />
    <input type="hidden" id="companyName" name="companyName" value="<%= companyName %>" />
    <input type="hidden" class="token" name="token" value="" />
  </form>

  <form action="/checkout" id="checkoutForm" method="post"></form>
  <script>




    async function dataFetcher() {
      //  fetching data
      const response= await fetch('http://localhost:5500/senddata/', {
        method: 'GET',
        headers: {
          'Content-type': 'application/json'
        }
        //mode: 'no-cors'
      })

      const data = await response.json()
      console.log('response: ',response)

      console.log('data: ',data )

      document.getElementById('TotalVehicle').innerHTML = data.total_no_of_vehicle
      document.getElementById('TotalChecks').innerHTML = data.total_no_of_inspections
      document.getElementById('AvgCheckTime').innerHTML = data.average_inspection_time


      // preparing dataset for cleared, uncleared and total vehicle
      let clearedDataset = []
      let unClearedDataset = []
      let totalVehicleDataset = []

      data.historical_vehicle_inspections.map((dayData) => {
        clearedDataset.push(dayData[1])
        unClearedDataset.push(dayData[2])
        totalVehicleDataset.push(dayData[0])
      })

      // !...........DAshboard Charts Functions....................


      //! Chart 1
      var pi_chart_1 = document.getElementById('pi_chart_1');
      var pi_chart_2 = document.getElementById('pi_chart_2');
      var pi_chart_3 = document.getElementById('pi_chart_3');

      var myChart1 = echarts.init(pi_chart_1, null, {
        renderer: 'canvas',
        useDirtyRect: false
      });
      var app = {};

      var myChart1option = {
        tooltip: {
          trigger: 'item'
        },
        legend: {
          top: '5%',
          left: 'center'
        },
        series: [
          {
            name: 'Total Inspection',
            type: 'pie',
            radius: ['40%', '70%'],
            avoidLabelOverlap: false,
            itemStyle: {
              borderRadius: 10,
              borderColor: '#fff',
              borderWidth: 2
            },
            label: {
              show: false,
              position: 'center'
            },
            emphasis: {
              label: {
                show: true,
                fontSize: 40,
                fontWeight: 'bold'
              }
            },
            labelLine: {
              show: false
            },
            data: [
              { value: data.total_ok_vehicle, name: `Cleared: ${data.total_ok_vehicle}`, itemStyle: { color: '#6495ed' } },
              { value: data.total_ng_vehicle, name: `Uncleared: ${data.total_ng_vehicle}`, itemStyle: { color: '#e47248' } },
            ]
          }
        ]
      };
      myChart1.setOption(myChart1option);

      // Pie Chart2
      var myChart2 = echarts.init(pi_chart_2, null, {
        renderer: 'canvas',
        useDirtyRect: false
      });
      var app = {};

      var myChart2option = {
        tooltip: {
          trigger: 'item'
        },
        legend: {
          top: '-3%',
          left: 'center'
        },
        series: [
          {
            name: 'Total Inspection',
            type: 'pie',
            radius: ['30%', '60%'],
            avoidLabelOverlap: false,
            itemStyle: {
              borderRadius: 10,
              borderColor: '#fff',
              borderWidth: 2
            },
            label: {
              show: false,
              position: 'center'
            },
            emphasis: {
              label: {
                show: true,
                fontSize: 20,
                fontWeight: 'bold'
              }
            },
            labelLine: {
              show: false
            },
            data: [
              { value: data.fortuner_ok_vehicle, name: `Cleared: ${data.fortuner_ok_vehicle}`, itemStyle: { color: '#6495ed' } },
              { value: data.fortuner_ng_vehicle, name: `Uncleared: ${data.fortuner_ng_vehicle}`, itemStyle: { color: '#e47248' } },
            ]
          }
        ]
      };
      myChart2.setOption(myChart2option);

      // Pie CHart 3
      var myChart3 = echarts.init(pi_chart_3, null, {
        renderer: 'canvas',
        useDirtyRect: false
      });
      var app = {};

      var myChart3option = {
        tooltip: {
          trigger: 'item'
        },
        legend: {
          top: '-3%',
          left: 'center'
        },
        series: [
          {
            name: 'Total Inspection',
            type: 'pie',
            radius: ['30%', '60%'],
            avoidLabelOverlap: false,
            itemStyle: {
              borderRadius: 10,
              borderColor: '#fff',
              borderWidth: 2
            },
            label: {
              show: false,
              position: 'center'
            },
            emphasis: {
              label: {
                show: true,
                fontSize: 20,
                fontWeight: 'bold'
              }
            },
            labelLine: {
              show: false
            },
            data: [
              { value: data.innova_ok_vehicle, name: `Cleared: ${data.innova_ok_vehicle}`, itemStyle: { color: '#6495ed' } },
              { value: data.innova_ng_vehicle, name: `Uncleared: ${data.innova_ng_vehicle}`, itemStyle: { color: '#e47248' } },
            ]
          }
        ]
      };
      myChart3.setOption(myChart3option);


      //Dummy Chart
      // var dom = document.getElementById('chart-container');
      // var myChart = echarts.init(dom, null, {
      //   renderer: 'canvas',
      //   useDirtyRect: false
      // });
      // var app = {};

      // var option;

      // const data = genData(50);
      // option = {
      //   title: {
      //     text: '同名数量统计',
      //     subtext: '纯属虚构',
      //     left: 'center'
      //   },
      //   tooltip: {
      //     trigger: 'item',
      //     formatter: '{a} <br/>{b} : {c} ({d}%)'
      //   },
      //   legend: {
      //     type: 'scroll',
      //     orient: 'vertical',
      //     right: 10,
      //     top: 20,
      //     bottom: 20,
      //     data: data.legendData
      //   },
      //   series: [
      //     {
      //       name: '姓名',
      //       type: 'pie',
      //       radius: '55%',
      //       center: ['40%', '50%'],
      //       data: data.seriesData,
      //       emphasis: {
      //         itemStyle: {
      //           shadowBlur: 10,
      //           shadowOffsetX: 0,
      //           shadowColor: 'rgba(0, 0, 0, 0.5)'
      //         }
      //       }
      //     }
      //   ]
      // };
      // function genData(count) {
      //   // prettier-ignore
      //   const nameList = [
      //     'Left Indicator', 'Right Indicator', 'Speedometer', ''
      //     ];
      //   const legendData = [];
      //   const seriesData = [];
      //   for (var i = 0; i < count; i++) {
      //     var name =
      //       Math.random() > 0.65
      //         ? makeWord(4, 1) + '·' + makeWord(3, 0)
      //         : makeWord(2, 1);
      //     legendData.push(name);
      //     seriesData.push({
      //       name: name,
      //       value: Math.round(Math.random() * 100000)
      //     });
      //   }
      //   return {
      //     legendData: legendData,
      //     seriesData: seriesData
      //   };
      //   function makeWord(max, min) {
      //     const nameLen = Math.ceil(Math.random() * max + min);
      //     const name = [];
      //     for (var i = 0; i < nameLen; i++) {
      //       name.push(nameList[Math.round(Math.random() * nameList.length - 1)]);
      //     }
      //     return name.join('');
      //   }
      // }
      // myChart.setOption(option);



      //Bar Chart
      var bar_graph = document.getElementById('bar_graph');
      var bar_graph = echarts.init(bar_graph, null, {
        renderer: 'canvas',
        useDirtyRect: false
      });
      var app = {};

      var option;

      const posList = [
        'left',
        'right',
        'top',
        'bottom',
        'inside',
        'insideTop',
        'insideLeft',
        'insideRight',
        'insideBottom',
        'insideTopLeft',
        'insideTopRight',
        'insideBottomLeft',
        'insideBottomRight'
      ];
      app.configParameters = {
        rotate: {
          min: -90,
          max: 90
        },
        align: {
          options: {
            left: 'left',
            center: 'center',
            right: 'right'
          }
        },
        verticalAlign: {
          options: {
            top: 'top',
            middle: 'middle',
            bottom: 'bottom'
          }
        },
        position: {
          options: posList.reduce(function (map, pos) {
            map[pos] = pos;
            return map;
          }, {})
        },
        distance: {
          min: 0,
          max: 100
        }
      };
      app.config = {
        rotate: 90,
        align: 'left',
        verticalAlign: 'middle',
        position: 'insideBottom',
        distance: 15,
        onChange: function () {
          const labelOption = {
            rotate: app.config.rotate,
            align: app.config.align,
            verticalAlign: app.config.verticalAlign,
            position: app.config.position,
            distance: app.config.distance
          };
          bar_graph.setOption({
            series: [
              {
                label: labelOption
              },
              {
                label: labelOption
              },
              {
                label: labelOption
              },
              {
                label: labelOption
              }
            ]
          });
        }
      };
      const labelOption = {
        show: true,
        position: app.config.position,
        distance: app.config.distance,
        align: app.config.align,
        verticalAlign: app.config.verticalAlign,
        rotate: app.config.rotate,
        formatter: '{c}  {name|{a}}',
        fontSize: 16,
        rich: {
          name: {}
        }
      };
      option = {
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'shadow'
          }
        },
        legend: {
          data: ['Fortuner', 'Innova']
        },
        toolbox: {
          show: true,
          orient: 'vertical',
          left: 'right',
          top: 'center',
          feature: {
            mark: { show: true },
            dataView: { show: true, readOnly: false },
            magicType: { show: true, type: ['line', 'bar', 'stack'] },
            restore: { show: true },
            saveAsImage: { show: true }
          }
        },
        xAxis: [
          {
            type: 'category',
            axisTick: { show: false },
            data: ['Combi', 'Rear Lamp', 'Front Lamp', 'Rear Spec', 'Front Spec']
          }
        ],
        yAxis: [
          {
            type: 'value'
          }
        ],
        series: [
          {
            name: 'Fortuner',
            type: 'bar',
            barGap: 0,
            label: labelOption,
            emphasis: {
              focus: 'series'
            },
            data: [data.fortuner_combi_results_defects, data.fortuner_front_lamp_results_defects, data.fortuner_rear_lamp_results_defects, data.fortuner_front_speck_results_defects, data.fortuner_rear_speck_results_defects]
          },
          {
            name: 'Innova',
            type: 'bar',
            label: labelOption,
            emphasis: {
              focus: 'series'
            },
            data: [data.innova_combi_results_defects, data.innova_front_lamp_results_defects, data.innova_rear_lamp_results_defects, data.innova_front_speck_results_defects, data.innova_rear_speck_results_defects]
          }
        ]
      };

      if (option && typeof option === 'object') {
        bar_graph.setOption(option);
      }

      //Line Chart
      var dom = document.getElementById('line_graph');
      var myChart = echarts.init(dom, null, {
        renderer: 'canvas',
        useDirtyRect: false
      });
      var app = {};

      var option;

      option = {
        title: {
          text: "Historical Overview",
          fontSize: 8,
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'cross',
            label: {
              backgroundColor: '#6a7985'
            }
          }
        },
        legend: {
          data: ['Cleared Vehicle', 'Unleared Vehicle', 'Tot Vehicle']
        },
        toolbox: {
          feature: {
            saveAsImage: {}
          }
        },
        grid: {
          left: '15%',
          right: '1%',
          bottom: '3%',
          containLabel: true
        },
        xAxis: [
          {
            type: 'category',
            boundaryGap: false,
            data: data.current_month_date
          }
        ],
        yAxis: [
          {
            type: 'value'
          }
        ],
        series: [
          {
            name: 'Cleared Vehicle',
            type: 'line',
            stack: 'Total',
            areaStyle: {},
            emphasis: {
              focus: 'series'
            },
            data: clearedDataset
          },
          {
            name: 'Unleared Vehicle',
            type: 'line',
            stack: 'Total',
            areaStyle: {},
            emphasis: {
              focus: 'series'
            },
            data: unClearedDataset
          },
          {
            name: 'Total Vehicle',
            type: 'line',
            stack: 'Total',
            areaStyle: {},
            emphasis: {
              focus: 'series'
            },
            data: totalVehicleDataset
          }
        ]
      };

      myChart.setOption(option);


    }

    dataFetcher()


    console.log('token: ', localStorage.getItem('token'));

    const tokenElements = document.getElementsByClassName('token');

    Object.values(tokenElements).map((tokenElement) => {
      tokenElement.value = localStorage.getItem('token');
    });

    document.addEventListener('click', hideAndSeek);

    function hideAndSeek(event) {
      const navBarDivision = document.getElementById('navBarDivision');
      if (event.target.id != 'navBarIcon') {
        navBarDivision.style.display = 'none';
      } else {
        if (
          navBarDivision.style.display == 'none' ||
          navBarDivision.style.display == ''
        ) {
          navBarDivision.style.display = 'inline-block';
        } else if (navBarDivision.style.display == 'inline-block') {
          navBarDivision.style.display = 'none';
        }
      }
    }

    function onmouseoverBGColor(event) {
      event.target.style.backgroundColor = '#075154';
    }

    function onmouseoutBGColor(event) {
      if (event.target.id != 'update') {
        event.target.style.backgroundColor = '#4ca1af';
      }
    }

    function handleFormSubmit(event) {
      var empStatus = '<%= emp_Status %>';
      var empChartAccess = '<%= emp_ChartAccess %>';

      if (event.target.id == 'reportGeneration') {
        if (empChartAccess.length > 0) {
          document.getElementById('filterFrom').submit();
        } else {
          document.getElementById(
            'reportGenerationDeniedDivision'
          ).style.visibility = 'visible';
        }
      } else if (event.target.id == 'update') {
        if (empStatus == 'admin') {
          document.getElementById('update_Section').submit();
        } else {
          document.getElementById(
            'adminAccessDeniedDivision'
          ).style.visibility = 'visible';
        }
      }
      else if (event.target.id == 'administration') {
        if (empStatus == 'admin') {
          document.getElementById('adminForm').submit();
        } else {
          document.getElementById(
            'adminAccessDeniedDivision'
          ).style.visibility = 'visible';
        }
      } else if (event.target.id == 'adminLog') {
        if (empStatus == 'admin') {
          document.getElementById('adminLogForm').submit();
        } else {
          document.getElementById(
            'adminAccessDeniedDivision'
          ).style.visibility = 'visible';
        }
      } else if (event.target.id == 'activityLog') {
        if (empStatus == 'admin') {
          document.getElementById('dashboardForm').submit();
        } else {
          document.getElementById(
            'adminAccessDeniedDivision'
          ).style.visibility = 'visible';
        }
      } else if (event.target.id == 'user_Profile') {
        document.getElementById('userProfileForm').submit();
      }
    }

    function logout() {
      localStorage.removeItem('token');
      Object.values(tokenElements).map((tokenElement) => {
        tokenElement.value = '';
      });
      document.getElementsByClassName('logoutButton')[0].submit();
    }

  </script>
</body>

</html>